{
    "sourceFile": "build/utils.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1697695329253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1697722508709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,92 @@\n-export function wrapperEnv(envOptions) {\n-    if (!envOptions) return {}\n-    const rst = {}\n-  \n-    for (const key in envOptions) {\n-      let val = envOptions[key]\n-      if (['true', 'false'].includes(val)) {\n-        val = val === 'true'\n+import fs from 'fs';\n+import path from 'path';\n+import dotenv from 'dotenv';\n+\n+/**\n+ * Returns the root path of the project.\n+ * @description The path does not end with a slash.\n+ * @returns {string}\n+ */\n+export function getRootPath() {\n+  return path.resolve(process.cwd());\n+}\n+\n+/**\n+ * Returns the source path of the project.\n+ * @param srcName Name of the source directory (default: \"src\")\n+ * @description The path does not end with a slash.\n+ * @returns {string}\n+ */\n+export function getSrcPath(srcName = 'src') {\n+  return path.resolve(getRootPath(), srcName);\n\\ No newline at end of file\n+}\n+\n+/**\n+ * Convert env options to a desired format.\n+ * @param {Object} envOptions \n+ * @returns {Object}\n+ */\n+export function convertEnv(envOptions) {\n+  const result = {};\n+  if (!envOptions) return result;\n+\n+  for (const envKey in envOptions) {\n+    let envVal = envOptions[envKey];\n+    if (['true', 'false'].includes(envVal)) envVal = envVal === 'true';\n+    if (['VITE_PORT'].includes(envKey)) envVal = Number(envVal);\n+    result[envKey] = envVal;\n+  }\n+\n+  return result;\n+}\n+\n+/**\n+ * Detect the current mode from npm scripts and return corresponding env files.\n+ * @returns {Array<string>}\n+ */\n+function detectEnvFiles() {\n+  const script = process.env.npm_lifecycle_script;\n+  const modeMatch = script?.match(/--mode ([a-z_\\\\d]+)/);\n+  const mode = modeMatch?.[1] || 'production';\n+  return ['.env', '.env.local', `.env.${mode}`];\n+}\n+\n+/**\n+ * Get the absolute path for a given file relative to the project root.\n+ * @param {string} filename \n+ * @returns {string}\n+ */\n+function getAbsolutePath(filename) {\n+  return path.resolve(getRootPath(), filename);\n+}\n+\n+/**\n+ * Get environment configurations.\n+ * @param {string} prefix Prefix for environment variable keys (default: \"VITE_\")\n+ * @param {Array<string>} confFiles List of configuration files to consider (default: detected files)\n+ * @returns {Object}\n+ */\n+export function getEnvConfig(prefix = 'VITE_', confFiles = detectEnvFiles()) {\n+  let envConfig = {};\n+\n+  confFiles.forEach((file) => {\n+    const filePath = getAbsolutePath(file);\n+    if (fs.existsSync(filePath)) {\n+      try {\n+        const env = dotenv.parse(fs.readFileSync(filePath));\n+        envConfig = { ...envConfig, ...env };\n+      } catch (error) {\n+        console.error(`Error in parsing ${file}`, error);\n       }\n-      if (['VITE_PORT'].includes(key)) {\n-        val = +val\n-      }\n-      if (key === 'VITE_PROXY' && val) {\n-        try {\n-          val = JSON.parse(val.replace(/'/g, '\"'))\n-        } catch (error) {\n-          val = ''\n-        }\n-      }\n-      rst[key] = val\n-      if (typeof key === 'string') {\n-        process.env[key] = val\n-      } else if (typeof key === 'object') {\n-        process.env[key] = JSON.stringify(val)\n-      }\n     }\n-    return rst\n-  }\n-  \n+  });\n+\n+  const prefixRegEx = new RegExp(`^(${prefix})`);\n+  Object.keys(envConfig).forEach((key) => {\n+    if (!prefixRegEx.test(key)) {\n+      delete envConfig[key];\n+    }\n+  });\n+\n+  return envConfig;\n+}\n"
                },
                {
                    "date": 1697722647842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,5 +88,41 @@\n     }\n   });\n \n   return envConfig;\n-}\n\\ No newline at end of file\n+}\n+\n+\n+\n+export const OUTPUT_DIR = 'dist'\n+\n+export const PROXY_CONFIG = {\n+  /**\n+   * @desc    替换匹配值\n+   * @请求路径  http://localhost:3100/api/user\n+   * @转发路径  http://localhost:8080/user\n+   */\n+  '/api': {\n+    target: 'http://localhost:8080',\n+    changeOrigin: true,\n+    rewrite: (path) => path.replace(new RegExp('^/api'), ''),\n+  },\n+  /**\n+   * @desc    不替换匹配值\n+   * @请求路径  http://localhost:3100/api/v2/user\n+   * @转发路径  http://localhost:8080/api/v2/user\n+   */\n+  '/api/v2': {\n+    target: 'http://localhost:8080',\n+    changeOrigin: true,\n+  },\n+  /**\n+   * @desc    替换部分匹配值\n+   * @请求路径  http://localhost:3100/api/v3/user\n+   * @转发路径  http://localhost:8080/user\n+   */\n+  '/api/v3': {\n+    target: 'http://localhost:8080',\n+    changeOrigin: true,\n+    rewrite: (path) => path.replace(new RegExp('^/api'), ''),\n+  },\n+}\n"
                },
                {
                    "date": 1697723382646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,87 +1,73 @@\n import fs from 'fs';\n import path from 'path';\n import dotenv from 'dotenv';\n \n-/**\n- * Returns the root path of the project.\n- * @description The path does not end with a slash.\n- * @returns {string}\n- */\n+// 定义项目根目录的绝对路径\n+const ROOT_PATH = path.resolve(process.cwd());\n+\n+// 获取指定相对路径的绝对路径\n+function resolvePath(...segments) {\n+  return path.resolve(ROOT_PATH, ...segments);\n+}\n+\n+// 获取项目根目录的绝对路径\n export function getRootPath() {\n-  return path.resolve(process.cwd());\n+  return ROOT_PATH;\n }\n \n-/**\n- * Returns the source path of the project.\n- * @param srcName Name of the source directory (default: \"src\")\n- * @description The path does not end with a slash.\n- * @returns {string}\n- */\n+// 获取项目源码目录的绝对路径\n export function getSrcPath(srcName = 'src') {\n-  return path.resolve(getRootPath(), srcName);\n+  return resolvePath(srcName);\n }\n \n-/**\n- * Convert env options to a desired format.\n- * @param {Object} envOptions \n- * @returns {Object}\n- */\n+// 转换环境变量，处理特定的环境变量类型\n export function convertEnv(envOptions) {\n   const result = {};\n   if (!envOptions) return result;\n \n   for (const envKey in envOptions) {\n     let envVal = envOptions[envKey];\n-    if (['true', 'false'].includes(envVal)) envVal = envVal === 'true';\n-    if (['VITE_PORT'].includes(envKey)) envVal = Number(envVal);\n-    result[envKey] = envVal;\n+    switch (envKey) {\n+      case 'VITE_PORT':\n+        // 将字符串转换为数字\n+        result[envKey] = Number(envVal);\n+        break;\n+      default:\n+        // 如果环境变量的值是'true'或'false'，则转换为布尔值\n+        result[envKey] = ['true', 'false'].includes(envVal) ? envVal === 'true' : envVal;\n+    }\n   }\n-\n   return result;\n }\n \n-/**\n- * Detect the current mode from npm scripts and return corresponding env files.\n- * @returns {Array<string>}\n- */\n+// 根据当前的运行模式（开发、生产等）来确定要读取的环境变量文件\n function detectEnvFiles() {\n   const script = process.env.npm_lifecycle_script;\n   const modeMatch = script?.match(/--mode ([a-z_\\\\d]+)/);\n   const mode = modeMatch?.[1] || 'production';\n   return ['.env', '.env.local', `.env.${mode}`];\n }\n \n-/**\n- * Get the absolute path for a given file relative to the project root.\n- * @param {string} filename \n- * @returns {string}\n- */\n-function getAbsolutePath(filename) {\n-  return path.resolve(getRootPath(), filename);\n-}\n-\n-/**\n- * Get environment configurations.\n- * @param {string} prefix Prefix for environment variable keys (default: \"VITE_\")\n- * @param {Array<string>} confFiles List of configuration files to consider (default: detected files)\n- * @returns {Object}\n- */\n+// 读取环境变量文件并返回与指定前缀匹配的环境变量\n export function getEnvConfig(prefix = 'VITE_', confFiles = detectEnvFiles()) {\n   let envConfig = {};\n \n+  // 遍历指定的环境变量文件列表\n   confFiles.forEach((file) => {\n-    const filePath = getAbsolutePath(file);\n+    const filePath = resolvePath(file);\n     if (fs.existsSync(filePath)) {\n       try {\n+        // 解析文件中的环境变量并合并到envConfig对象中\n         const env = dotenv.parse(fs.readFileSync(filePath));\n         envConfig = { ...envConfig, ...env };\n       } catch (error) {\n-        console.error(`Error in parsing ${file}`, error);\n+        console.error(`解析文件 ${file} 出错`, error);\n       }\n     }\n   });\n \n+  // 删除不匹配指定前缀的环境变量键\n   const prefixRegEx = new RegExp(`^(${prefix})`);\n   Object.keys(envConfig).forEach((key) => {\n     if (!prefixRegEx.test(key)) {\n       delete envConfig[key];\n@@ -90,10 +76,15 @@\n \n   return envConfig;\n }\n \n+// 定义项目构建输出的目录名称\n+export const OUTPUT_DIR = 'dist';\n \n+// 定义代理配置，用于在开发模式下代理API请求\n+export const PROXY_CONFIG = { ... };  // 保持不变\n \n+\n export const OUTPUT_DIR = 'dist'\n \n export const PROXY_CONFIG = {\n   /**\n"
                },
                {
                    "date": 1697723390272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,11 +80,11 @@\n // 定义项目构建输出的目录名称\n export const OUTPUT_DIR = 'dist';\n \n // 定义代理配置，用于在开发模式下代理API请求\n-export const PROXY_CONFIG = { ... };  // 保持不变\n \n \n+\n export const OUTPUT_DIR = 'dist'\n \n export const PROXY_CONFIG = {\n   /**\n"
                },
                {
                    "date": 1697723396014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,15 +77,14 @@\n   return envConfig;\n }\n \n // 定义项目构建输出的目录名称\n-export const OUTPUT_DIR = 'dist';\n \n-// 定义代理配置，用于在开发模式下代理API请求\n \n \n \n export const OUTPUT_DIR = 'dist'\n+// 定义代理配置，用于在开发模式下代理API请求\n \n export const PROXY_CONFIG = {\n   /**\n    * @desc    替换匹配值\n"
                },
                {
                    "date": 1697723418204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,13 +77,10 @@\n   return envConfig;\n }\n \n // 定义项目构建输出的目录名称\n+export const OUTPUT_DIR = 'dist'\n \n-\n-\n-\n-export const OUTPUT_DIR = 'dist'\n // 定义代理配置，用于在开发模式下代理API请求\n \n export const PROXY_CONFIG = {\n   /**\n"
                }
            ],
            "date": 1697695329253,
            "name": "Commit-0",
            "content": "export function wrapperEnv(envOptions) {\n    if (!envOptions) return {}\n    const rst = {}\n  \n    for (const key in envOptions) {\n      let val = envOptions[key]\n      if (['true', 'false'].includes(val)) {\n        val = val === 'true'\n      }\n      if (['VITE_PORT'].includes(key)) {\n        val = +val\n      }\n      if (key === 'VITE_PROXY' && val) {\n        try {\n          val = JSON.parse(val.replace(/'/g, '\"'))\n        } catch (error) {\n          val = ''\n        }\n      }\n      rst[key] = val\n      if (typeof key === 'string') {\n        process.env[key] = val\n      } else if (typeof key === 'object') {\n        process.env[key] = JSON.stringify(val)\n      }\n    }\n    return rst\n  }\n  "
        }
    ]
}